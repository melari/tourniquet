// Generated by CoffeeScript 1.9.2
(function() {
  String.prototype.startsWith = function(str) {
    return this.lastIndexOf(str, 0) === 0;
  };

  this.remote_call = function(url, params, callback, error_callback) {
    var request;
    if (error_callback == null) {
      error_callback = function() {};
    }
    url += generate_query_string(params);
    request = new XMLHttpRequest;
    request.open("GET", url, true);
    request.onreadystatechange = function() {
      if (request.readyState === 4) {
        if (request.status === 200) {
          return callback(request.responseText);
        } else {
          return error_callback(request.status, request.responseText);
        }
      }
    };
    return request.send();
  };

  this.remote_post_call = function(url, params, callback, error_callback) {
    var request;
    if (error_callback == null) {
      error_callback = function() {};
    }
    request = new XMLHttpRequest;
    request.open("POST", url, true);
    request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    request.onreadystatechange = function() {
      if (request.readyState === 4) {
        if (request.status === 200) {
          return callback(request.responseText);
        } else {
          return error_callback(request.status, request.responseText);
        }
      }
    };
    return request.send(this.generate_query_string(params, true));
  };

  this.remote_file_upload = function(url, file, params, callback, progress_handler, error_callback) {
    var form_data, request;
    if (error_callback == null) {
      error_callback = function() {};
    }
    url += generate_query_string(params);
    request = new XMLHttpRequest;
    request.upload.addEventListener('progress', progress_handler);
    request.open("POST", url, true);
    request.onreadystatechange = function() {
      if (request.readyState === 4) {
        if (request.status === 200) {
          return callback(request.responseText);
        } else {
          return error_callback(request.status, request.responseText);
        }
      }
    };
    form_data = new FormData();
    form_data.append("file", file);
    return request.send(form_data);
  };

  this.generate_query_string = function(params, exclude_question) {
    var key, result, value;
    result = "";
    if (!exclude_question) {
      result = "?";
    }
    for (key in params) {
      value = params[key];
      if (params.hasOwnProperty(key)) {
        result += (encodeURIComponent(key)) + "=" + (encodeURIComponent(value)) + "&";
      }
    }
    return result.slice(0, -1);
  };

  this.debounce_timers = {};

  this.debounce = function(id, callback, length) {
    if (length == null) {
      length = 500;
    }
    if (debounce_timers[id] != null) {
      clearTimeout(debounce_timers[id]);
    }
    return debounce_timers[id] = setTimeout(callback, length);
  };

  this.url_for = function(url) {
    if (url.startsWith("http")) {
      return url;
    }
    return __APP_NAMESPACE + url;
  };

  this.select = function(param) {
    return $(param);
  };

  this.id = function(id) {
    return this.select("#" + id);
  };

  this.value_of = function(eid) {
    var e;
    e = id(eid);
    if (e.attr("type") === "checkbox") {
      if (e.is(":checked")) {
        return 1;
      } else {
        return 0;
      }
    }
    return e.val();
  };

  this.set_value = function(eid, value) {
    var e;
    e = id(eid);
    if (e.attr("type") === "checkbox") {
      return e.prop('checked', value);
    } else {
      return e.val(value);
    }
  };

  this.set_html = function(eid, value) {
    return id(eid).html(value);
  };

  this.append_html = function(eid, value) {
    return id(eid).append(value);
  };

  this.show = function(element_id) {
    return this.id(element_id).css("display", "block");
  };

  this.hide = function(element_id) {
    return this.id(element_id).css("display", "none");
  };

  this.toggle = function(element_id) {
    if (this.id(element_id).css("display") !== "none") {
      return this.hide(element_id);
    } else {
      return this.show(element_id);
    }
  };

  this.remove = function(element_id) {
    return this.id(element_id).remove();
  };

  this.redirect = function(url, params) {
    if (params != null) {
      url += generate_query_string(params);
    }
    return window.location = url;
  };

  this.remove_newlines = function(string) {
    if (string.replace) {
      return string.replace(/(\r\n|\n|\r)/gm, "");
    }
  };

  this.post_redirect = function(url, params) {
    var form, hidden_field, key, value;
    form = document.createElement("form");
    form.setAttribute("method", "post");
    form.setAttribute("action", url);
    for (key in params) {
      value = params[key];
      if (params.hasOwnProperty(key)) {
        hidden_field = document.createElement("input");
        hidden_field.setAttribute("type", "hidden");
        hidden_field.setAttribute("name", this.remove_newlines(key));
        hidden_field.setAttribute("value", this.remove_newlines(value));
        form.appendChild(hidden_field);
      }
    }
    document.body.appendChild(form);
    return form.submit();
  };

  this.on_ready = function(func) {
    return $(document).ready(function() {
      return func.call(window);
    });
  };

  this.javascript_form = function(lambda) {
    lambda();
    return false;
  };

}).call(this);
